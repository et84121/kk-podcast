// Generated by ts-to-zod
import { z } from 'zod';

const enclosureSchema = z.object({
  url: z.string(),
  length: z.string(),
  type: z.string(),
});

const itunesSchema = z.object({
  author: z.string(),
  summary: z.string(),
  explicit: z.string(),
  duration: z.string(),
  image: z.string().url(),
  episode: z.string(),
  season: z.string(),
  keywords: z.string().optional(),
  subtitle: z.string().optional(),
});

const episodeSchema = z.object({
  creator: z.string(),
  title: z.string(),
  link: z.string().url(),
  pubDate: z.string(),
  'content:encoded': z.string(),
  'content:encodedSnippet': z.string(),
  enclosure: enclosureSchema,
  'dc:creator': z.string(),
  content: z.string(),
  contentSnippet: z.string(),
  guid: z.string(),
  isoDate: z.string(),
  itunes: itunesSchema,
});

const imageSchema = z.object({
  link: z.string().url(),
  url: z.string().url(),
  title: z.string(),
});

const paginationLinksSchema = z.object({
  self: z.string(),
});

const ownerSchema = z.object({
  name: z.string(),
  email: z.string(),
});

const categoriesWithSubSchema = z.object({
  name: z.string(),
  subs: z.any().optional(),
});

const channelItunesFieldSchema = z.object({
  owner: ownerSchema,
  image: z.string().url(),
  categories: z.array(z.string()),
  categoriesWithSubs: z.array(categoriesWithSubSchema),
  author: z.string(),
  subtitle: z.string(),
  summary: z.string(),
  explicit: z.string(),
});

export const podcastChannelSchema = z.object({
  items: z.array(episodeSchema),
  feedUrl: z.string().url(),
  image: imageSchema,
  paginationLinks: paginationLinksSchema,
  title: z.string(),
  description: z.string(),
  generator: z.string(),
  link: z.string().url(),
  language: z.string(),
  copyright: z.string(),
  lastBuildDate: z.string(),
  itunes: channelItunesFieldSchema,
});

export type PodcastChannel = z.infer<typeof podcastChannelSchema>;
